=begin
Script for hunting with Ericos et al.
=end

@core_group = ["Ericos", "Predest", "Alyssea", "Archaeron", "Draccor", "Naina", "Szyxt"]
@target_types = /aggressive npc|undead|bandit|grimswarm/

def name
	#Function to get active character name
	Char.name
end

def get_current_group
	#Get members of current group
	group = []
	fput "group"
	while line = get
		case line
		when /(?<name>\w+) is following|(?<name>\w+) is also a member|(?<name>\w+) is the leader/
			group.push($~[:name])
		when /Your group status/
			break
		end
	end
	group
end

@current_group = get_current_group
@group_mutex = Mutex.new

def poaching
	#Test if someone in the room is unexpected, to avoid poaching
	#Get minimal list of names to care about
		pcs = Set.new @core_group
		@group_mutex.synchronize {
			pcs.merge @current_group
		}
	party_members = Regexp.new pcs.to_a.join("|")
	GameObj.pcs.any? {|pc| pc.name !~ party_members}
end

def change_stance new_stance, force = true
	#return unless new_stance =~ /off/ # pookahs/bog
	return if Spell[1617].active? || Spell[216].active? || dead?

	if stance() =~ /#{new_stance}/
		return
	elsif checkcastrt() > 0 && new_stance =~ /def/
		return if stance() == 'guarded'
	end

	if(force)
		result = dothistimeout( "stance #{new_stance}", 3, /You are now in an?|Cast Round Time in effect|You are unable to change/ )
	else
		put "stance #{new_stance}"
	end
end

def stand
	until(standing?)
		change_stance('defensive')
		fput 'stand'
	end
end

def is_valid_target npc, valid_targets=@valid_targets, target_types=@target_types
  #Function which determines if an NPC is a valid target for combat
  npc.name =~ valid_targets and npc.status !~ /dead|gone/i and npc.type =~ target_types
end

def maintain_spells spells, min_mana: -1, max_mana: -1
  #Ensures that all given spells are active, and casts to refresh them, assuming spells are affordable.
  return if spells.all? {|spell| spell.active?}
  return if min_mana >= 0 and checkmana <= min_mana
  return if max_mana >= 0 and checkmana >= max_mana

  spells.each { |spell|
    if spell.known? and spell.affordable? and !spell.active?
      waitcastrt?
      spell.cast
      waitcastrt?
    end
  }
end

def cmd_gos
  sigils = [Spell[9705], Spell[9707], Spell[9708], Spell[9710]]
	maintain_spells sigils, min_mana: 15
end

def cmd_power
    power = [Spell[9718]]
    maintain_spells power, max_mana: 100
    # Pause to ensure lich can track stamina/mana
    pause 0.5
end

def cmd_col
    signs = [Spell[9904], Spell[9907], Spell[9908], Spell[9912], Spell[9913]]
    maintain_spells signs, min_mana: 5
end

def cmd_voln
    symbols = [Spell[9805], Spell[9806]]
    maintain_spells symbols
end

def cmd_smastery
    #Check if cooldown is in effect
    return if Spell[9604].active?
    maintain_spells [Spell[9603]]
end

def cmd_fury target
	return unless Spell[635].known? and Spell[635].affordable?
	return if checkmana <= 45
	return if(hiding?)
	return if GameObj.npcs.count { |npc| is_valid_target npc } < 5

	waitcastrt?
	Spell[635].cast("#{target}")
	change_stance('guarded')
	waitcastrt?
end

def cmd_swarm target
	return if target.status =~ /dead|gone/
	return if GameObj.loot.find { |loot| loot.name =~ /swarm/ }
	return if GameObj.loot.find { |loot| loot.name =~ /vine/ }
	return unless Spell[615].known? and Spell[615].affordable?
	return if target.name =~ /lava golem|skayl|banshee|stone troll|stone giant/i
	return if checkmana <= 140
	return if(hiding?)

	waitcastrt?
	change_stance('offensive')
	Spell[615].cast("#{target}")
	change_stance('guarded')
	waitcastrt?
end

def cmd_weed target
	return if target.status =~ /dead|gone/
	return if GameObj.loot.find { |loot| loot.name =~ /vine/ }
	return unless Spell[610].known? and Spell[610].affordable?
	return if target.name =~ /lava golem|skayl|banshee/i
	return if checkmana <= 140
	return if(hiding?)

	waitcastrt?
	change_stance('offensive')
	Spell[610].cast("#{target}")
	change_stance('guarded')
	waitcastrt?
end

def cmd_sounds target
	return if target.status =~ /dead|gone/
	return unless Spell[607].known? and Spell[607].affordable?

	waitcastrt?
	Spell[607].cast("#{target}")
	waitcastrt?

end

def cmd_camo
	return if(hiding?)
  maintain_spells [Spell[608]], min_mana: 15
end


def cmd_hide
	return if(hiding?)
	fput "hide"
		waitrt?
		if matchtimeout 1, "You attempt to blend with the surroundings"
		sleep 0.1
	end
end

def cmd_ambush target
	return if target.status =~ /dead|gone/

	change_stance('offensive')
	if target.status =~ /kneel|sit|lying|stunned/
		result = dothistimeout( "ambush ##{target.id} head", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
		if( result =~ /You cannot|already missing/ )
			result = dothistimeout( "ambush ##{target.id} right leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
			if( result =~ /does not have a|already missing/ )
				result = dothistimeout( "ambush ##{target.id} left leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
				if( result =~ /does not have a|already missing/ )
					fput "ambush ##{target.id} head"
				end
			end
		end
	else
		result = dothistimeout( "ambush ##{target.id} right leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
		if( result =~ /does not have a|already missing/ )
			result = dothistimeout( "ambush ##{target.id} left leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
			if( result =~ /does not have a|already missing/ )
				fput "kill ##{target.id}"
			end
		end
	end
	change_stance('defensive')
end

def cmd_kill target
	return if target.status =~ /dead|gone/

	change_stance('offensive')
	fput "kill ##{target.id}"
	change_stance('defensive')
	end

def cmd_mstrike
	if( !Spell[9005].active? && Skills.multiopponentcombat >= 15 && GameObj.npcs.all? { |i| i.noun !~ /nest/i } )
		if( GameObj.npcs.size > 1 )
			change_stance('offensive')
			fput "mstrike"
			change_stance('defensive')
		else
			change_stance('offensive')
			fput "kill"
			change_stance('defensive')
		end
	else
		kill
	end
end

def cmd_vibration target
	return if target.status =~ /dead|gone/
	return unless Spell[1002].known? and Spell[1002].affordable?
	return if checkmana <= 45

	waitcastrt?
	Spell[1002].cast("#{target}")
	waitcastrt?

end

def cmd_bone target
	return if target.status =~ /dead|gone/
	return unless Spell[1106].known? and Spell[1106].affordable?

		waitcastrt?
		multifput "incant 1106", "stance defensive"
		waitcastrt?
end

def cmd_empathiclink target
	return if target.status =~ /dead|gone/
	return unless Spell[1117].known? and Spell[1117].affordable?
	return if checkmana <= 45
	return if GameObj.npcs.count { |npc| is_valid_target npc } < 4

	waitcastrt?
	Spell[1117].cast("#{target}")
	change_stance('guarded')
	waitcastrt?
end

def cmd_bind target
  #Attempts to bind all monsters which are alive and unbound, while maintaining 50 mana
	return unless Spell[214].known?

	GameObj.npcs.each { |npc|
#		 echo "##{npc.id} #{npc.status !~ /immobilized|dead|gone/i}"
		if npc.type =~ @target_types and npc.status !~ /frozen|dead|gone/i and checkmana > 50
			Spell[214].cast "##{npc.id}"
		end
	}
end

def cmd_target
	target = GameObj.npcs.find { |npc| is_valid_target npc }
	if target
		fput "target ##{target.id}"
	end
  target
end

def cmd_sympathy
  #Cast sympathy if enough creatures are present
  sympathy = Spell[1120]
  return unless sympathy.known? and sympathy.affordable?
  return if GameObj.npcs.count { |npc| is_valid_target npc, target_types=/bandit/ } < 6
  sympathy.cast
end

def cmd_loot
	target = GameObj.npcs.find { |npc| npc.status == 'dead' }
	if target
		start_script "sloot"
		wait_while{running?('sloot')}
	else
		sleep 0.1
	end
end

def ekill
	cmd_col
end

def pkill
	loop {
    cmd_gos

		if !poaching

			@valid_targets = /(rat|golem|minotaur magus|minotaur warrior|minotaur magi|krag yeti|krag dweller|lesser minotaur|soldier|thrak|manticore|grey orc|crystal golem|forest troll|hill troll|war troll|warrior|mercenary|puma|warfarer|rogue|theif|thug|bandit|outlaw|brigand|marauder|highwayman|robber|mugger|banshee|troll king|dweller|harbinger|elemental|seeker|ice golem|sabre-tooth tiger|Shaman|Mystic|Mastiff|stone giant|Jarl|Elder|stone troll|fire guardian|Krolvin dissembler|Krolvin|minotaur|witch|ranger|raider|soldier|fighter|hunter|archer|sorcerer|wizard|cleric|barbarian|mage|warrior|rogue|acolyte|skirmisher|adept|scout|scourge|sniper|dissembler|empath|guard|witch|warlock|sorceress|marauder|thief|tsark|golem|sprite|griffin|grifflet|yeti|dogmatist|hierophant|supplicant|farlook|boar|direbear|direwolf|viper|goleras|moulis|shrickhen)/i
			target = cmd_target
			if target
				cmd_gos
				cmd_smastery
		#		cmd_sounds target
				cmd_weed target
				cmd_swarm target
		#		cmd_fury target
				stand
				cmd_camo
				cmd_hide
				cmd_ambush target
			else
#			cmd_loot
			end
		end
		sleep 0.5
	}
end

def alyskill
	loop {
		cmd_gos

		if !poaching

			@valid_targets = /(warrior|mercenary|puma|warfarer|rogue|theif|thug|bandit|outlaw|brigand|marauder|highwayman|robber|mugger|janissary|herald|griffin|scout|adept|lurk|fanatic|monstrosity|shaper|sentinel|lesser minotaur|krag yeti|minotaur warrior|minotaur magus|jarl|krynch|elder|being|goleras|moulis|shrickhen|champion|seer|initiate|dogmatist|hierophant|supplicant)/i
			target = cmd_target
			if target
				cmd_gos
			#	cmd_bind target
			#	cmd_bone target
			#	cmd_empathiclink target
				cmd_power
			else
				cmd_loot
			end
		end
		sleep 0.5
	}
end

def archkill
	loop {
    cmd_voln
		if !poaching

			@valid_targets = /(rat|golem|minotaur magus|minotaur warrior|minotaur magi|krag yeti|krag dweller|lesser minotaur|soldier|thrak|manticore|grey orc|crystal golem|forest troll|hill troll|war troll|warrior|mercenary|puma|warfarer|rogue|theif|thug|bandit|outlaw|brigand|marauder|highwayman|robber|mugger|banshee|troll king|dweller|harbinger|elemental|seeker|ice golem|sabre-tooth tiger|Shaman|Mystic|Mastiff|stone giant|Jarl|Elder|stone troll|fire guardian|Krolvin dissembler|Krolvin|minotaur|witch|ranger|raider|soldier|fighter|hunter|archer|sorcerer|wizard|cleric|barbarian|mage|warrior|rogue|acolyte|skirmisher|adept|scout|scourge|sniper|dissembler|empath|guard|witch|warlock|sorceress|marauder|thief|tsark|golem|sprite|griffin|grifflet|yeti|dogmatist|hierophant|supplicant|farlook|boar|direbear|direwolf|viper|goleras|moulis|shrickhen)/i
			target = cmd_target
			if target
				cmd_vibration target
				cmd_kill target
			else
			#	cmd_loot
			end
		end
		sleep 0.5
	}
end

toggle_upstream

command_thread = Thread.new {
	loop {
		line = upstream_get
		if line =~ /#{$lich_char}#{script.name} update_group/
			@group_mutex.synchronize {
				@current_group = get_current_group
			}
		end
	}
}

loop {
	stand
  case name
  when 'Alyssea'
    alyskill
	when 'Archaeron'
		archkill
	when 'Predest'
		pkill
	when 'Ericos'
		ekill
	end
	sleep 1.0
}
